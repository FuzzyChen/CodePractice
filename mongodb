Problem 1:

1)use restaurants
db.restaurants.insertMany([{"name" : "A","cuisine":"bakery"}, ...{"name" : "B","cuisine":"hotpot"}]);
2)db.restaurants.find()
3)db.restaurants.find({},{"name": 1,"borough": 1,"cuisine": 1 })
4)db.restaurants.find({},{"name": 1,"borough": 1,"cuisine": 1,"_id": 0 })
5)db.restaurants.find({},{"name": 1,"borough": 1,"cuisine": 1,"_id": 0,"address.zipcode":1 })

problem 2:

1) use University
2) db.Students.insertOne({“SID”:1, “Name”: “Nelson”, “Age”:25, “Major”:”Computer”,
  “Address”: {“Street”:”19 Liberty Avenue”, “City”:”Phoenix”, “State”:”AZ”}})
3) db.Students.insertMany([{..}, {..}, {..}, {..}, {..}, {..}, {..}, {..}, {..}, {..}])
4) db.Students.find()
5) db.Students.find({“Age”:{“$gt”:15}})
6) db.Students.find({“name”:{“$sort”}})
db.Students.find().sort({“name”:1})
7) db.Student.updateOne({“SID”:3},{“$set”:{“Major”:”Computer Science”}})



Problem 3:

2) db.people.updateMany({“Status”:”Marries”, “DoB.Month”:1}, {“$set”:{“DoB.Month”:”January”}})
3) db.people.deleteMany({“Name”:”Nelson”})
4) db.people.deleteMany({“Age”: {“$gt”:65}})
5) db.people.updateMany({“Age”:25}, {“$inc”:{“Age”:1}})
6) db.people.replaceOne({“Name”:”Nelson”, “Age”:25}, {“Name”:”Jason”})

Problem 4:
2) db.people.updateMany({“Age”:25}, {“$set”:{“Age”:27}})
3) db.people.updateMany({“Name”:”Nelson”}, {“$unset”:{“Age”:1}})
4) db.people.updateMany({“Name”:”Nelson”}, {“$push”: {“Contact”:{“Home page”:”www.com”}}})
5) db.people.updateMany({“Name”:”Nelson”}, {“$push”:{“$each”:[“Physicists”, “Scientist”]}})
6) db.people.updateMany({“Name”:”Nelson”}, {“$push”:{“Groups”:{“$each”:[1,2,3,4,5],”$slice”:-7, “$sort”:{“Group”:1}}})

/*
Problem 1: Consider the following structure of “restaurants” collection: {
"address": {
"building": "1007",
"coord": [ -73.856077, 40.848447 ], "street": "Morris Park Ave", "zipcode": "10462"
},
"borough": "Bronx", "cuisine": "Bakery", "grades": [
{ "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 }, { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 }, { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 }, { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 }, { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
],
"name": "Morris Park Bake Shop", "restaurant_id": "30075445"
}
1. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
2. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
3. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which are not belonging to the borough Staten Island or Queens or Bronxor
Brooklyn.
4. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which achieved a score which is not more than 10.
*/

db.restaurants.insertOne({
"address":{
"building": "1007",
"coord": [ -73.856077, 40.848447 ], "street": "Morris Park Ave", "zipcode": "10462"
},
"borough": "Bronx", "cuisine": "Bakery",
"grades": [
{ "date": 1393804800000 , "grade": "A", "score": 2 },
{ "date": 1378857600000 , "grade": "A", "score": 6 },
{ "date": 1358985600000 , "grade": "A", "score": 10 },
{ "date": 1322006400000 , "grade": "A", "score": 9 },
{ "date": 1299715200000 , "grade": "B", "score": 14 }
],
"name": "Morris Park Bake Shop", "restaurant_id": "30075445"
})

#Problem 1 Q1
db.restaurants.find({
"borough": "Bronx" ,
$or : [
{ "cuisine" : "American " },
{ "cuisine" : "Chinese" }
]
});

#2
b.restaurants.find(
{"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

#3
db.restaurants.find(
{"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

#4
db.restaurants.find(
{"grades.score" :
{ $not: {$gt : 10}}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

#Problem 2 Q1
db.restaurants.find(
{$or: [
  {name: /^Wil/},
  {"$and": [
       {"cuisine" : {$ne :"American "}},
       {"cuisine" : {$ne :"Chinees"}}
   ]}
]}
,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}
);

#2
db.restaurants.find(
{
  "grades.date": ISODate("2014-08-11T00:00:00Z"),
  "grades.grade":"A" ,
  "grades.score" : 11
},
{"restaurant_id" : 1,"name":1,"grades":1});

#3
db.restaurants.find(
{
  "grades.date": ISODate("2014-08-11T00:00:00Z"),
  "grades.grade":"A" ,
  "grades.score" :9
},
{"restaurant_id" : 1,"name":1,"grades":1});

#4
db.restaurants.find({
{"address.coord.1": {$gt : 42, $lte : 52}},
{"restaurant_id" : 1,"name":1,"address":1,"coord":1});

db.people.count({$where:function(){return(this.cat.age > this.age)}})

/*Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters.
Your result cannot contain duplicates.*/
select distinct city from station where right(city,1) in ('a','e','i','o','u');

/*Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u)
as both their first and last characters. Your result cannot contain duplicates.*/

select distinct city from station where right(city,1) in ('a','e','i','o','u') and
left(city,1) in ('a','e','i','o','u');

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
Input Format*/

select distinct city from station where left(city,1) not in ('a','e','i','o','u');
select distinct city from station where right(city,1) not in ('a','e','i','o','u');
select distinct city from station where (left(city,1) not in ('a','e','i','o','u'))
and (right(city,1) not in ('a','e','i','o','u'));

/*Query the Name of any student in STUDENTS who scored higher than 75 Marks.
Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters
(i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.*/

select name from students where marks>75
order by right(name,3),id asc;


/*
Write a query that prints a list of employee names
(i.e.: the name attribute) from the Employee table in alphabetical order.
*/
select name from employee order by name;
select name from employee where salary>2000 and months<10 order by employee_id asc;

/*friend's salary higher*/


Select S.name From (Students S join Friends F Using(ID)
         join Packages p1 on S.id = p1.id
         join Packages p2 on F.friend_id = p2.id)
         where p2.salary>p1.salary
         order by p2.salary
         ;

/*Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.
Output one of the following statements for each record in the table:*/

Select case
when A+B<=C or A+C<=B or B+C<=A then "Not A Triangle"
when A=B and B=C then "Equilateral"
when A=B or B=C or A=C then "Isosceles"
else "Scalene"
end
from triangles;

/*
Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses).
For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS.
 Sort the occurrences in ascending order, and output them in the following format:
 */
 select concat(name,'(',left(occupation,1),')') from occupations order by name;
 select concat('There are a total of ',count(occupation)),lower(concat(occupation,'s.'))
 from occupations group by occupation order by count(occupation),occupation;

select count(deptdesc) from deptinfo where deptdesc like ('e%');
select * from trnsact where saledate between '2004-08-01' and '2004-08-10' order by orgprice,sprice;

SELECT COUNT(DISTINCT Dog_Guid)
  FROM complete_tests
    where created_at>'2014-03-01';

SELECT test_name, MONTH(created_at) AS Month, COUNT(created_at) AS Num_Completed_Tests
    FROM complete_tests
    WHERE MONTH(created_at)=11 OR MONTH(created_at)=12
    GROUP BY 1, 2
    HAVING COUNT(created_at)>=20
    ORDER BY 3 DESC;
/*
Pivot the Occupation column in OCCUPATIONS so that each Name is
sorted alphabetically and displayed underneath its corresponding Occupation.
The output column headers should be Doctor, Professor, Singer,
 and Actor, respectively.
 */
 SET @dRow = 0, @pRow = 0, @sRow = 0, @aRow = 0;
 SELECT MIN(Doctor), MIN(Professor), MIN(Singer), MIN(Actor)
 FROM (
     SELECT  CASE Occupation
                 WHEN 'Doctor'       THEN @dRow := @dRow + 1
                 WHEN 'Professor'    THEN @pRow := @pRow + 1
                 WHEN 'Singer'       THEN @sRow := @sRow + 1
                 WHEN 'Actor'        THEN @aRow := @aRow + 1
             END AS row,
             IF (Occupation = 'Doctor', Name, NULL) AS Doctor,
             IF (Occupation = 'Professor', Name, NULL) AS Professor,
             IF (Occupation = 'Singer', Name, NULL) AS Singer,
             IF (Occupation = 'Actor', Name, NULL) AS Actor
     FROM    OCCUPATIONS
     ORDER BY Name
 ) a
 GROUP BY row;




select COUNT(name) from CITY where population>100000;
select avg(population) from city where district='California';
/*round down: floor  round up: cell*/
select floor(avg(population)) from city ;

SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES;

select  round(sum(lat_n),2),round(sum(long_w),2) from station;
select round((lat_n),4) from station where lat_n>38.778 order by lat_n limit 1;
select round(max(lat_n)+max(long_w)-min(lat_n)-min(long_w),4) from station;
select round(sqrt(power(max(lat_n)-min(lat_n),2)+power(max(long_w)-min(long_w),2)),4) from station;

select round(lat_n,4) from station order by lat_n limit 250;

/*find median*/
Select round(S.LAT_N,4) from station S where
(select count(Lat_N) from station where Lat_N < S.LAT_N ) = (select count(Lat_N) from station where Lat_N > S.LAT_N)

/*Join*/
SELECT sum(city.population)
FROM city
JOIN country ON city.countrycode = country.code
where country.continent = 'Asia';


SELECT country.continent,floor(avg(city.population))
FROM city
JOIN country ON city.countrycode = country.code
group by country.continent


SELECT (CASE g.grade>=8 WHEN TRUE THEN s.name ELSE null END),g.grade,s.marks
FROM students s
INNER JOIN grades g ON s.marks BETWEEN min_mark AND max_mark
ORDER BY g.grade DESC,s.name,s.marks;


SELECT H.hacker_id,H.name,S1.score, max(S2.score)
FROM Hackers H
JOIN Submissions S1 ON H.hacker_id = S1.hacker_id
join Submissions S2 ON S1.challenge_id = S2.submission_id
group by H.hacker_id;


UPDATE salary
SET
    sex = CASE sex
        WHEN 'm' THEN 'f'
        ELSE 'm'
    END;
